#! OWL semantics inference rules.
base <https://treeldr.org/semantics/owl/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix owl: <www.w3.org/2002/07/owl#>
prefix proto-owl: <https://treeldr.org/semantics/owl/proto#>

## Functional property.
rule FunctionalProperty {
	?c rdf:type owl:FunctionalProperty .
	?x ?c ?y1 .
	?x ?c ?y2 .
} => {
	?y1 = ?y2 !
}

## Inverse functional property.
rule InverseFunctionalProperty {
	?c rdf:type owl:InverseFunctionalProperty .
	?x1 ?c ?y .
	?x2 ?c ?y .
} => {
	?x1 = ?x2 !
}

## Symmetric property.
rule SymmetricProperty {
	?c rdf:type owl:SymmetricProperty .
	?x ?c ?y .
} => {
	?y ?c ?x .
}

rule TransitiveProperty {
	?c rdf:type owl:TransitiveProperty .
	?x ?c ?y .
	?y ?c ?z .
} => {
	?x ?c ?z .
}

rule EquivalentClass {
	?x owl:equivalentClass ?y .
	?a rdf:type ?x .
} => {
	?a rdf:type ?y .
}

rule DisjointWith {
	?x owl:disjointWith ?y .
	?a rdf:type ?x .
} => {
	! ?a rdf:type ?y .
}

rule EquivalentProperty {
	?x owl:equivalentProperty ?y .
	?u ?x ?v .
} => {
	?u ?y ?v .
}

rule InverseOf {
	?x owl:inverseOf ?y .
	?u ?x ?v .
} => {
	?v ?y ?u .
}

rule SameAs {
	?x owl:sameAs ?y .
} => {
	?x = ?y .
}

rule DifferentFrom {
	?x owl:differentFrom ?y .
} => {
	! ?x = ?y .
}

## Complement.
group ComplementOf {
	rule 1 {
		?x owl:complementOf ?y .
		?v rdf:type ?x .
	} => {
		! ?v rdf:type ?y .
	}

	rule 2 {
		?x owl:complementOf ?y .
		! ?v rdf:type ?y .
	} => {
		?v rdf:type ?x .
	}
}

# Class union.
rule UnionOf {
	?x owl:unionOf ?list .
	?list rdf:rest*/rdf:first ?y .
	?v rdf:type ?y .
} => {
	?v rdf:type ?x .
}

## Class intersection.
group IntersectionOf {
	rule Base {
		?x owl:intersectionOf ?list .
		?v proto-owl:inIntersectionOf ?list .
	} => {
		?v rdf:type ?x .
	}

	rule inIntersectionOf/1 {
		?list rdf:first ?c .
		?list rdf:rest ?rest .
		?v rdf:type ?c .
		?v proto-owl:inIntersectionOf ?rest .
	} => {
		?v proto-owl:inIntersectionOf ?list .
	}

	rule inIntersectionOf/2 {
		# nothing
	} => {
		?v proto-owl:inIntersectionOf rdf:nil .
	}
}

rule OneOf {
	?x owl:oneOf ?list .
	?list rdf:rest*/rdf:first ?v .
} => {
	?v rdf:type ?y .
}